name: Node.js LINUX CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # --- Checkout repository ---
    - name: Checkout repository
      uses: actions/checkout@v2

    # --- Setup Node.js ---
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 20

    # --- Install dependencies ---
    - name: Install dependencies
      run: yarn install --frozen-lockfile

    # --- Install Docker Compose (official plugin) ---
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose-plugin
        docker compose version

    # --- Clone or update microservice locally ---
    - name: Clone or Update ipfs-microservice Repository
      run: |
        if [ ! -d "ipfs-microservice" ]; then
          git clone https://github.com/DeedLink/ipfs-microservice.git ipfs-microservice
        else
          cd ipfs-microservice
          git fetch origin
          git reset --hard origin/master
          cd ..
        fi

    # --- Create .env file for local Docker build ---
    - name: Add .env to ipfs-microservice
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ipfs-microservice/.env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ipfs-microservice/.env
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> ipfs-microservice/.env
        echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> ipfs-microservice/.env
        echo "PORT=5001" >> ipfs-microservice/.env

    # --- Build & run locally (optional test run) ---
    - name: Run Docker Compose locally
      run: |
        cd ipfs-microservice
        docker compose pull || true
        docker compose up -d --remove-orphans
        docker ps

    # --- Build Docker image ---
    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ipfs-microservice:latest ./ipfs-microservice

    # --- Log in to Docker Hub ---
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    # --- Push Docker image to Docker Hub ---
    - name: Push Docker Image
      run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ipfs-microservice:latest

    # --- Deploy to EC2 (Amazon Linux) ---
    - name: Deploy via SSH to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.LINUX_SERVER_IP }}
        username: ${{ secrets.LINUX_SERVER_USER }}
        key: ${{ secrets.LINUX_SERVER_SSH_KEY }}
        script: |
          # Ensure deployment directory exists
          DEPLOY_DIR=/home/ec2-user/deedlink-deployments
          mkdir -p $DEPLOY_DIR
          cd $DEPLOY_DIR

          # Install dependencies if missing
          sudo yum install -y git docker
          sudo systemctl enable docker
          sudo systemctl start docker

          # Install Docker Compose if not found
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Clone or update the service repo
          if [ ! -d "ipfs-microservice" ]; then
            git clone https://github.com/DeedLink/ipfs-microservice.git ipfs-microservice
          fi

          cd ipfs-microservice
          git fetch origin
          git reset --hard origin/master

          # Write .env file for runtime
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
          echo "PORT=5001" >> .env

          # Pull latest Docker image and restart service
          docker compose pull
          docker compose down
          docker compose up -d --remove-orphans

          # Show running containers
          docker ps
